*{
	margin: 0;
	padding: 0;
	font-family: 'Poppins', sans-serif;
}
.header{
	width: 100%; /*for the image to occupy 100% of the width of the page*/
	min-height: 100vh; /*Min height 100vh means the element should occupy the web browser viewport height. This is always 100 percent of the web browser's viewport height. If there is more content, the element will stretch more than the viewport's height*/
	background-image: linear-gradient(rgba(4,9,30,0.7),rgba(4,9,30,0.7)),url(../img/banner.png);/*to work the photo with css with gradient*/
	background-position: center;/*to center the image*/
	background-size: cover;/*Resize the background image to cover the entire container, even if it has to stretch the image or cut a little bit off one of the edges*/
	position: relative;	/*The element is positioned relative to its normal position, so "left:20px" adds 20 pixels to the element's LEFT position

	Resumo
	Position Static ja vem por padrão então seguem o fluxo da pagina normalmente. Por isso as propriedades top bottom left right não funcionarão
	Position fixed faz o elemento ficar fixo na pagina.. posicionado em relação a viewport (tamanho total do documento) e permanece mesmo rolando o scrol.
	Position sticky ele cola na posição definida pelas propriedades do position.. caso o scrol leve ele ate la..
	Position Relative apenas segue a propriedade mandada e permanecera nela.
	Position Absolute é posicionado em relação ao elemento de maior hierarquia que possui um position relative ou ao body da pagina caso este elemento nao exista.


Resumo Flex

Resumo Display

	*/
}
nav{
	display: flex;
	justify-content: space-between;
	text-align: center;
	padding: 2% 6%; /*Espaço interno da nav pai*/
}
nav img{
	width: 150px;
}
.nav-links{
	flex: 1;
	/*Flex: 1 Means
flex-grow : 1;    ➜ The div will grow in same proportion as the window-size       
flex-shrink : 1;  ➜ The div will shrink in same proportion as the window-size 
flex-basis : 0;   ➜ The div does not have a starting value as such and will take up screen as per the screen size available for e.g:- if 3 divs are in the wrapper then each div will take 33%.
	*/
	text-align: right;
}
.nav-links ul li{
	list-style: none; /*Tira as bolinhas da lista*/
	display: inline-block; /*Sair da lista da ul e ficar lado a lado*/	
	padding: 8px 12px; /*Espaço entre os links*/
	position: relative;
}
.nav-links ul li a{
	color: #fff;
	text-decoration: none; /*Tirar underline do link*/
	font-size: 13px;
}
.nav-links ul li::after{ /*Será criado apois o conteudo.. Serve para deixar a marcação mais limpa... pois sem ele seria necessario criar uma div e estilizar ela*/
	content: ''; /*Cria o Pseudo Element seja criado*/
	width: 0%;
	height: 2px;
	background: #f44336;
	display: block;
	margin: auto;
	/*
Ordem dos valores da margem
	margin: top right bottom left 
margin: 0; margem de todos os lados = 0 
margin: 0 1px; top/bottom = 0; right/left = 1px 
margin: 0 1px 2px; top = 0; right/left = 1px; bottom = 2px 
margin: 0 1px 2px 3px; top = 0; right= 1px; bottom = 2px; left = 3px 
margin: auto;
Significa que o browser dará uma margem automática para todos os lados. A margem automática não irá funcionar em todas as ocasiões pois ela precisa de uma lógica para funcionar.*/
	transition: 0.5s;
	/*Gera efeitos de tempo de execução
Segue a ordem (Apos os dois pontos são exemplos)
transition-property: all; 
transition-duration: 2s;
transition-timing-function: ease-out;
transition-delay: 0s;
é igual a 
transition: all 2s ease-out 0;
	*/
}
.nav-links ul li:hover::after{/*Acredito que sem este after, o hover aplicaria o efeito dele sem que o after do codigo acima fosse aplicado...*/
	width: 100%;
}
.text-box{
	width: 90%; /*Largura da Div em relação a tela*/
	color: #fff;
	position: absolute;
	top: 50%;
	left: 50%;
	text-align: center; /*Div ocupara o centro da tela*/
	transform: translate(-50%,-50%);/*Acredito que seja um macete de centralização usando position absolute com transform translate.. pq sem o transform os valores seriam top 32% left 5%*/
	
}
.text-box h1{
	font-size: 62px;
}
.text-box p{
	margin: 10px 0 40px;/*afastar um pouco do h1 e mais do botao*/
	font-size: 14px;
	color: #fff;
}
.hero-btn{
	cursor: pointer;
	display: inline-block;
	background: transparent;
	position: relative;/*não mudou nada..*/
	text-decoration: none;
	color: #fff;
	border: 1px solid #fff;
	padding: 12px 34px;
	font-size: 13px;
	
}
.hero-btn:hover{
	background: #f44336;
	border: 1px solid #f44336;
	transition: 1s;
}

nav .fa{
	display: none; /*Voce não quer as 3 barrinhas no menu de tela grande de pc...*/
}

@media(max-width: 700px){
	.text-box h1{
		font-size: 20px;
	}
	.nav-links ul li{
		display: block;
	}
	.nav-links{
		position: absolute;
		background: #f44336;
		height: 100vh;
		width: 200px;
		top: 0;
		right: -200px;
		text-align: left;		
		transition: 1s;
		z-index: 2;/*Neste caso, sem o z index maior, o menu ficaria atras do conteudo escrito no meio da pagina, uma vez que foi escrito primeiro. O ultimo elemento sempre fica em cima por default 
		Aponta profundidade. Quando maior o numero, menos profundo é, ou seja, aparece na frente da tela, na frente dos outros elementos. */
	}
	nav .fa{
		display: block;
		color: #fff;
		margin: 10px;
		font-size: 22px;
		cursor: pointer;
	}
	.nav-links ul{
		padding: 30px;
	}
}